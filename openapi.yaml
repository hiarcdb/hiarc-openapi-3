openapi: 3.0.3
info:
  version: 0.1.0
  title: Hiarc API
  license:
    name: MIT
  description: |-
    Welcome to the Hiarc API documentation.
servers:
  - description: HiarcServer
    url: "http://localhost:5000"
security:
  - AdminApiKeyAuth: []
  - JWTBearerAuth: []
paths:
  "/users":
    post:
      summary: Create a User
      security:
        - AdminApiKeyAuth: []
      operationId: createUser
      tags:
        - User
      requestBody:
        description: "User information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        "201":
          description: A User object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    get:
      summary: Get all Users
      security:
        - AdminApiKeyAuth: []
      operationId: getAllUsers
      tags:
        - User
      responses:
        "200":
          description: A list of User objects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfUsers"
  "/users/{key}":
    get:
      summary: Get a User
      security:
        - AdminApiKeyAuth: []
      operationId: getUser
      tags:
        - User
      parameters:
        - name: key
          in: path
          required: true
          description: "Key of user to get"
          schema:
            type: string
      responses:
        "200":
          description: A User object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    put:
      summary: Update a User
      security:
        - AdminApiKeyAuth: []
      operationId: updateUser
      tags:
        - User
      parameters:
        - name: key
          in: path
          required: true
          description: "Key of user to get"
          schema:
            type: string
      requestBody:
        description: "User information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        "200":
          description: A User object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    delete:
      summary: Delete a User
      security:
        - AdminApiKeyAuth: []
      operationId: deleteUser
      tags:
        - User
      parameters:
        - name: key
          in: path
          required: true
          description: "Key of user to delete"
          schema:
            type: string
      responses:
        "200":
          description: Empty response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  "/users/current":
    get:
      summary: Get the current User
      security:
        - AdminApiKeyAuth: []
        - JWTBearerAuth: []
      operationId: getCurrentUser
      tags:
        - User
      parameters:
        - in: header
          name: X-Hiarc-User-Key
          schema:
            type: string
      responses:
        "200":
          description: A User object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  "/users/find":
    post:
      summary: Find a User
      security:
        - AdminApiKeyAuth: []
      operationId: findUser
      tags:
        - User
      requestBody:
        description: "User query"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindUsersRequest"
      responses:
        "200":
          description: A list of User objects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfUsers"
  "/users/{key}/groups":
    get:
      summary: Get Groups for a User
      security:
        - AdminApiKeyAuth: []
      operationId: getGroupsForUser
      tags:
        - User
        - Groups
      parameters:
        - in: header
          name: X-Hiarc-User-Key
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: "Key of user"
          schema:
            type: string
      responses:
        "200":
          description: A list of Group objects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfGroups"
  "/users/current/groups":
    get:
      summary: Get the Groups for the current User
      security:
        - AdminApiKeyAuth: []
        - JWTBearerAuth: []
      operationId: getGroupsForCurrentUser
      parameters:
        - in: header
          name: X-Hiarc-User-Key
          schema:
            type: string
      tags:
        - User
        - Group
      responses:
        "200":
          description: A list of Group object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfGroups"
  "/files":
    post:
      summary: Create a File
      security:
        - AdminApiKeyAuth: []
        - JWTBearerAuth: []
      operationId: createFile
      tags:
        - File
      parameters:
        - in: header
          name: X-Hiarc-User-Key
          schema:
            type: string
      requestBody:
        description: "File information"
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                  request:
                    type: string
                  file:
                    type: string
                    format: binary
      responses:
        "201":
          description: A File object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
  "/files/{key}":
    get:
      summary: Get a File's Info
      security:
        - AdminApiKeyAuth: []
        - JWTBearerAuth: []
      operationId: getFile
      tags:
        - File
      parameters:
        - name: X-Hiarc-User-Key
          in: header
          description: "Optional key of user to impersonate"
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: "Key of file to get info"
          schema:
            type: string
      responses:
        "200":
          description: A File object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
    put:
      summary: Update a File
      security:
        - AdminApiKeyAuth: []
      operationId: updateFile
      tags:
        - File
      parameters:
        - name: key
          in: path
          required: true
          description: "Key of file to update"
          schema:
            type: string
      requestBody:
        description: "File information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateFileRequest"
      responses:
        "200":
          description: A File object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
    delete:
      summary: Delete a File
      security:
        - AdminApiKeyAuth: []
        - JWTBearerAuth: []
      operationId: deleteFile
      tags:
        - File
      parameters:
        - name: X-Hiarc-User-Key
          in: header
          description: "Optional key of user to impersonate"
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: "Key of file to delete"
          schema:
            type: string
      responses:
        "200":
          description: Empty response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  "/files/allowed":
    post:
      summary: Filter a list of File keys that a User can access
      security:
        - AdminApiKeyAuth: []
      operationId: filterAllowedFiles
      tags:
        - Files
      parameters:
        - name: X-Hiarc-User-Key
          in: header
          description: "Optional key of user to impersonate"
          schema:
            type: string
      requestBody:
        description: "File key list"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AllowedFilesRequest"
      responses:
        "200":
          description: A list of File keys
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllowedFiles"
  "/files/{key}/attach":
    put:
      summary: Attach to an existing File
      security:
        - AdminApiKeyAuth: []
        - JWTBearerAuth: []
      operationId: attachToExisitingFile
      tags:
        - File
      parameters:
        - in: header
          name: X-Hiarc-User-Key
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: "Key of file to attach to"
          schema:
            type: string
      requestBody:
        description: "File information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttachToExistingFileRequest"
      responses:
        "201":
          description: A File object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
  "/files/{key}/copy":
    put:
      summary: Copy a File
      security:
        - AdminApiKeyAuth: []
        - JWTBearerAuth: []
      operationId: copyFile
      tags:
        - File
      parameters:
        - in: header
          name: X-Hiarc-User-Key
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: "Key of file to attach to"
          schema:
            type: string
      requestBody:
        description: "File information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CopyFileRequest"
      responses:
        "201":
          description: A File object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
  "/files/{key}/versions":
    get:
      summary: Get a list of File Versions
      security:
        - AdminApiKeyAuth: []
        - JWTBearerAuth: []
      operationId: getVersions
      tags:
        - File
      parameters:
        - name: X-Hiarc-User-Key
          in: header
          description: "Optional key of user to impersonate"
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: "Key of file to get all versions"
          schema:
            type: string
      responses:
        "200":
          description: A list of File Versions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfFileVersions"
    put:
      summary: Add a new File Version
      security:
        - AdminApiKeyAuth: []
        - JWTBearerAuth: []
      operationId: addVersion
      tags:
        - File
      parameters:
        - in: header
          name: X-Hiarc-User-Key
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: "Key of file to add a version"
          schema:
            type: string
      requestBody:
        description: "File information"
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                  request:
                    type: string
                  file:
                    type: string
                    format: binary
      responses:
        "201":
          description: A File object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
  "/files/{key}/retentionpolicies":
    get:
      summary: Get a list of Retention Policies on a File
      security:
        - AdminApiKeyAuth: []
        - JWTBearerAuth: []
      operationId: getRetentionPolicies
      tags:
        - File
      parameters:
        - name: X-Hiarc-User-Key
          in: header
          description: "Optional key of user to impersonate"
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: "Key of file to get all retention policies"
          schema:
            type: string
      responses:
        "200":
          description: A list of Retention Policies
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfRetentionPolicyApplication"
    put:
      summary: Add a Retention Policy to a File
      security:
        - AdminApiKeyAuth: []
        - JWTBearerAuth: []
      operationId: addRetentionPolicyToFile
      tags:
        - File
      parameters:
        - in: header
          name: X-Hiarc-User-Key
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: "Key of file"
          schema:
            type: string
      requestBody:
        description: "Retention Policy information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddRetentionPolicyToFileRequest"
      responses:
        "200":
          description: Empty response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  "/files/{key}/collections":
    get:
      summary: Get a list of Collections for a File
      security:
        - AdminApiKeyAuth: []
        - JWTBearerAuth: []
      operationId: getCollectionsForFile
      tags:
        - File
      parameters:
        - name: X-Hiarc-User-Key
          in: header
          description: "Optional key of user to impersonate"
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: "Key of file to get all collections"
          schema:
            type: string
      responses:
        "200":
          description: A list of Collections
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfCollections"
  "/files/{key}/download":
    get:
      summary: Download a File
      security:
        - AdminApiKeyAuth: []
        - JWTBearerAuth: []
      operationId: downloadFile
      tags:
        - File
      parameters:
        - name: X-Hiarc-User-Key
          in: header
          description: "Optional key of user to impersonate"
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: "Key of file to download"
          schema:
            type: string
      responses:
        "200":
          description: A binary file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  "/files/directuploadurl":
    post:
      summary: Create a direct upload url to a storage service
      security:
        - AdminApiKeyAuth: []
      operationId: createDirectUploadUrl
      parameters:
        - name: X-Hiarc-User-Key
          in: header
          description: "Optional key of user to impersonate"
          schema:
            type: string
        - name: expiresInSeconds
          in: query
          required: false
          schema:
            type: integer
          description: When access to the url should expire
      tags:
        - File
      requestBody:
        description: "Storage service information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDirectUploadUrlRequest"
      responses:
        "200":
          description: A direct upload object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileDirectUpload"
  "/files/{key}/directdownloadurl":
    get:
      summary: Get a direct download URL to a File
      security:
        - AdminApiKeyAuth: []
        - JWTBearerAuth: []
      operationId: getDirectDownloadUrl
      tags:
        - File
      parameters:
        - name: X-Hiarc-User-Key
          in: header
          description: "Optional key of user to impersonate"
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: "Key of file to get download URL"
          schema:
            type: string
        - name: expiresInSeconds
          in: query
          description: When access to the url should expire
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: A direct download URL object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileDirectDownload"
  "/files/{key}/users":
    put:
      summary: Give a user access to a File
      security:
        - AdminApiKeyAuth: []
        - JWTBearerAuth: []
      operationId: addUserToFile
      tags:
        - File
      parameters:
        - in: header
          name: X-Hiarc-User-Key
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: "Key of file"
          schema:
            type: string
      requestBody:
        description: "User information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddUserToFileRequest"
      responses:
        "200":
          description: Empty response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  "/files/{key}/groups":
    put:
      summary: Give a group access to a File
      security:
        - AdminApiKeyAuth: []
        - JWTBearerAuth: []
      operationId: addGroupToFile
      tags:
        - File
      parameters:
        - in: header
          name: X-Hiarc-User-Key
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: "Key of file"
          schema:
            type: string
      requestBody:
        description: "Group information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddGroupToFileRequest"
      responses:
        "200":
          description: Empty response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  "/files/{key}/classifications":
    put:
      summary: Add a Classification to a File
      security:
        - AdminApiKeyAuth: []
        - JWTBearerAuth: []
      operationId: addClassificationToFile
      tags:
        - File
      parameters:
        - in: header
          name: X-Hiarc-User-Key
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: "Key of file"
          schema:
            type: string
      requestBody:
        description: "Classification information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddClassificationToFileRequest"
      responses:
        "200":
          description: Empty response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  "/tokens/user":
    post:
      summary: Create a Token for a User
      security:
        - AdminApiKeyAuth: []
      operationId: createUserToken
      tags:
        - Token
      requestBody:
        description: "User information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserTokenRequest"
      responses:
        "200":
          description: A User Token object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCredentials"
  "/collections/{key}":
    get:
      summary: Get a Collection's Info
      security:
        - AdminApiKeyAuth: []
        - JWTBearerAuth: []
      operationId: getCollection
      tags:
        - Collection
      parameters:
        - name: X-Hiarc-User-Key
          in: header
          description: "Optional key of user to impersonate"
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: "Key of collection to get info"
          schema:
            type: string
      responses:
        "200":
          description: A Collection object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
    put:
      summary: Update a Collection
      security:
        - AdminApiKeyAuth: []
        - JWTBearerAuth: []
      operationId: updateCollection
      tags:
        - Collection
      parameters:
        - name: X-Hiarc-User-Key
          in: header
          description: "Optional key of user to impersonate"
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: "Key of collection to get info"
          schema:
            type: string
      requestBody:
        description: "Collection information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCollectionRequest"
      responses:
        "200":
          description: A Collection object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
    delete:
      summary: Delete a Collection
      security:
        - AdminApiKeyAuth: []
        - JWTBearerAuth: []
      operationId: deleteCollection
      tags:
        - Collection
      parameters:
        - name: X-Hiarc-User-Key
          in: header
          description: "Optional key of user to impersonate"
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: "Key of Collection to delete"
          schema:
            type: string
      responses:
        "200":
          description: Empty response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  "/collections":
    post:
      summary: Create a Collection
      security:
        - AdminApiKeyAuth: []
      operationId: createCollection
      tags:
        - Collection
      parameters:
        - name: X-Hiarc-User-Key
          in: header
          description: "Optional key of user to impersonate"
          schema:
            type: string
      requestBody:
        description: "Collection information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCollectionRequest"
      responses:
        "201":
          description: A Collection object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
    get:
      summary: Get all Collections
      security:
        - AdminApiKeyAuth: []
      operationId: getAllCollections
      tags:
        - Collection
      parameters:
        - name: X-Hiarc-User-Key
          in: header
          description: "Optional key of user to impersonate"
          schema:
            type: string
      responses:
        "200":
          description: A list of Collection objects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfCollections"
  "/collections/{key}/files":
    get:
      summary: Get a Collection's Files
      security:
        - AdminApiKeyAuth: []
        - JWTBearerAuth: []
      operationId: getCollectionFiles
      tags:
        - Collection
      parameters:
        - name: X-Hiarc-User-Key
          in: header
          description: "Optional key of user to impersonate"
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: "Key of collection"
          schema:
            type: string
      responses:
        "200":
          description: A List of File objects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfFiles"
    put:
      summary: Add a File to a Collection
      security:
        - AdminApiKeyAuth: []
        - JWTBearerAuth: []
      operationId: addFileToCollection
      tags:
        - Collection
      parameters:
        - name: X-Hiarc-User-Key
          in: header
          description: "Optional key of user to impersonate"
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: "Key of Collection"
          schema:
            type: string
      requestBody:
        description: "Add File request"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddFileToCollectionRequest"
      responses:
        "200":
          description: Empty response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  "/collections/{key}/children":
    get:
      summary: Get a Collection's child Collections
      security:
        - AdminApiKeyAuth: []
        - JWTBearerAuth: []
      operationId: getCollectionChildren
      tags:
        - Collection
      parameters:
        - name: X-Hiarc-User-Key
          in: header
          description: "Optional key of user to impersonate"
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: "Key of collection"
          schema:
            type: string
      responses:
        "200":
          description: A List of Collection objects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfCollections"
  "/collections/{key}/items":
    get:
      summary: Get a Collection's child items, including Collections and Files
      security:
        - AdminApiKeyAuth: []
        - JWTBearerAuth: []
      operationId: getCollectionItems
      tags:
        - Collection
      parameters:
        - name: X-Hiarc-User-Key
          in: header
          description: "Optional key of user to impersonate"
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: "Key of collection"
          schema:
            type: string
      responses:
        "200":
          description: Collection Item objects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CollectionItems"
  "/collections/find":
    post:
      summary: Find a Collection
      security:
        - AdminApiKeyAuth: []
        - JWTBearerAuth: []
      operationId: findCollection
      tags:
        - Collection
      parameters:
        - name: X-Hiarc-User-Key
          in: header
          description: "Optional key of user to impersonate"
          schema:
            type: string
      requestBody:
        description: "Collection query"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindCollectionsRequest"
      responses:
        "200":
          description: A list of Collection objects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfCollections"
  "/collections/{key}/files/{fileKey}":
    delete:
      summary: Remove a File from a Collection
      security:
        - AdminApiKeyAuth: []
        - JWTBearerAuth: []
      operationId: removeFileFromCollection
      tags:
        - Collection
      parameters:
        - name: X-Hiarc-User-Key
          in: header
          description: "Optional key of user to impersonate"
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: "Key of Collection"
          schema:
            type: string
        - name: fileKey
          in: path
          required: true
          description: "Key of File to remove from Collection"
          schema:
            type: string
      responses:
        "200":
          description: Empty response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  "/collections/{key}/children/{childKey}":
    put:
      summary: Add a child item to a Collection
      security:
        - AdminApiKeyAuth: []
        - JWTBearerAuth: []
      operationId: addChildToCollection
      tags:
        - Collection
      parameters:
        - name: X-Hiarc-User-Key
          in: header
          description: "Optional key of user to impersonate"
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: "Key of Collection"
          schema:
            type: string
        - name: childKey
          in: path
          required: true
          description: "Key of item to add as child to Collection"
          schema:
            type: string
      responses:
        "200":
          description: Empty response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  "/collections/{key}/users":
    put:
      summary: Add a User to a Collection
      security:
        - AdminApiKeyAuth: []
        - JWTBearerAuth: []
      operationId: addUserToCollection
      tags:
        - Collection
      parameters:
        - name: X-Hiarc-User-Key
          in: header
          description: "Optional key of user to impersonate"
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: "Key of Collection"
          schema:
            type: string
      requestBody:
        description: "Add User request"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddUserToCollectionRequest"
      responses:
        "200":
          description: Empty response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  "/collections/{key}/groups":
    put:
      summary: Add a Group to a Collection
      security:
        - AdminApiKeyAuth: []
        - JWTBearerAuth: []
      operationId: addGroupToCollection
      tags:
        - Collection
      parameters:
        - name: X-Hiarc-User-Key
          in: header
          description: "Optional key of user to impersonate"
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: "Key of Collection"
          schema:
            type: string
      requestBody:
        description: "Add Group request"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddGroupToCollectionRequest"
      responses:
        "200":
          description: Empty response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  "/classifications/{key}":
    get:
      summary: Get a Classification's Info
      security:
        - AdminApiKeyAuth: []
      operationId: getClassification
      tags:
        - Classification
      parameters:
        - name: X-Hiarc-User-Key
          in: header
          description: "Optional key of user to impersonate"
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: "Key of Classification to get info"
          schema:
            type: string
      responses:
        "200":
          description: A Classification object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Classification"
    put:
      summary: Update a Classification
      security:
        - AdminApiKeyAuth: []
      operationId: updateClassification
      tags:
        - Classification
      parameters:
        - name: X-Hiarc-User-Key
          in: header
          description: "Optional key of user to impersonate"
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: "Key of Classification to get info"
          schema:
            type: string
      requestBody:
        description: "Classification information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateClassificationRequest"
      responses:
        "200":
          description: A Classification object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Classification"
    delete:
      summary: Delete a Classification
      security:
        - AdminApiKeyAuth: []
      operationId: deleteClassification
      tags:
        - Classification
      parameters:
        - name: X-Hiarc-User-Key
          in: header
          description: "Optional key of user to impersonate"
          schema:
            type: string
        - name: key
          in: path
          required: true
          description: "Key of Classification to delete"
          schema:
            type: string
      responses:
        "200":
          description: Empty response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  "/classifications":
    get:
      summary: Get all Classifications
      security:
        - AdminApiKeyAuth: []
      operationId: getAllClassifications
      tags:
        - Classification
      parameters:
        - name: X-Hiarc-User-Key
          in: header
          description: "Optional key of user to impersonate"
          schema:
            type: string
      responses:
        "200":
          description: A list of Classification objects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfClassifications"
    post:
      summary: Create a Classification
      security:
        - AdminApiKeyAuth: []
      operationId: createClassification
      tags:
        - Classification
      parameters:
        - name: X-Hiarc-User-Key
          in: header
          description: "Optional key of user to impersonate"
          schema:
            type: string
      requestBody:
        description: "Classification information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateClassificationRequest"
      responses:
        "201":
          description: A Classification object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Classification"
  "/classifications/find":
    post:
      summary: Find a Classification
      security:
        - AdminApiKeyAuth: []
      operationId: findClassification
      tags:
        - Classification
      parameters:
        - name: X-Hiarc-User-Key
          in: header
          description: "Optional key of user to impersonate"
          schema:
            type: string
      requestBody:
        description: "Classification query"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindClassificationsRequest"
      responses:
        "200":
          description: A list of Classification objects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfClassifications"
  "/groups/{key}":
    get:
      summary: Get a Group's Info
      security:
        - AdminApiKeyAuth: []
      operationId: getGroup
      tags:
        - Group
      parameters:
        - name: key
          in: path
          required: true
          description: "Key of Group to get info"
          schema:
            type: string
      responses:
        "200":
          description: A Group object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
    put:
      summary: Update a Group
      security:
        - AdminApiKeyAuth: []
      operationId: updateGroup
      tags:
        - Group
      parameters:
        - name: key
          in: path
          required: true
          description: "Key of Group to update"
          schema:
            type: string
      requestBody:
        description: "Group information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateGroupRequest"
      responses:
        "200":
          description: A Group object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
    delete:
      summary: Delete a Group
      security:
        - AdminApiKeyAuth: []
      operationId: deleteGroup
      tags:
        - Group
      parameters:
        - name: key
          in: path
          required: true
          description: "Key of Group to delete"
          schema:
            type: string
      responses:
        "200":
          description: Empty response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  "/groups/{key}/users/{userKey}":
    put:
      summary: Add a User to a Group
      security:
        - AdminApiKeyAuth: []
      operationId: addUserToGroup
      tags:
        - Group
      parameters:
        - name: key
          in: path
          required: true
          description: "Key of Group"
          schema:
            type: string
        - name: userKey
          in: path
          required: true
          description: "Key of User to add to Group"
          schema:
            type: string
      responses:
        "200":
          description: Empty response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  "/groups":
    get:
      summary: Get all Groups
      security:
        - AdminApiKeyAuth: []
      operationId: getAllGroups
      tags:
        - Group
      responses:
        "200":
          description: A list of Group objects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfGroups"
    post:
      summary: Create a Group
      security:
        - AdminApiKeyAuth: []
      operationId: createGroup
      tags:
        - Group
      requestBody:
        description: "Group information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGroupRequest"
      responses:
        "201":
          description: A Group object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
  "/groups/find":
    post:
      summary: Find a Group
      security:
        - AdminApiKeyAuth: []
      operationId: findGroup
      tags:
        - Group
      requestBody:
        description: "Group query"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindGroupsRequest"
      responses:
        "200":
          description: A list of Group objects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfGroups"
  "/legalholds":
    post:
      summary: Create a Legal Hold
      security:
        - AdminApiKeyAuth: []
      operationId: createLegalHold
      tags:
        - Legal Hold
      requestBody:
        description: "Legal Hold information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLegalHoldRequest"
      responses:
        "201":
          description: A Legal Hold object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LegalHold"
  "/legalholds/{key}":
    get:
      summary: Get a Legal Hold's Info
      security:
        - AdminApiKeyAuth: []
      operationId: getLegalHold
      tags:
        - Legal Hold
      parameters:
        - name: key
          in: path
          required: true
          description: "Key of Legal Hold to get info"
          schema:
            type: string
      responses:
        "200":
          description: A Legal Hold object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LegalHold"
  "/retentionpolicies":
    get:
      summary: Get all Retention Policies
      security:
        - AdminApiKeyAuth: []
      operationId: getAllRetentionPolicies
      tags:
        - Retention Policy
      responses:
        "200":
          description: A list of Retention Policy objects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfRetentionPolicies"
    post:
      summary: Create a Retention Policy
      security:
        - AdminApiKeyAuth: []
      operationId: createRetentionPolicy
      tags:
        - Retention Policy
      requestBody:
        description: "Retention Policy information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRetentionPolicyRequest"
      responses:
        "201":
          description: A Retention Policy object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RetentionPolicy"
  "/retentionpolicies/{key}":
    get:
      summary: Get a Retention Policy's Info
      security:
        - AdminApiKeyAuth: []
      operationId: getRetentionPolicy
      tags:
        - Retention Policy
      parameters:
        - name: key
          in: path
          required: true
          description: "Key of Retention Policy to get info"
          schema:
            type: string
      responses:
        "200":
          description: A Retention Policy object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RetentionPolicy"
    put:
      summary: Update a Retention Policy
      security:
        - AdminApiKeyAuth: []
      operationId: updateRetentionPolicy
      tags:
        - Retention Policy
      parameters:
        - name: key
          in: path
          required: true
          description: "Key of Retention Policy to update"
          schema:
            type: string
      requestBody:
        description: "RetentionPolicy information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRetentionPolicyRequest"
      responses:
        "200":
          description: A Retention Policy object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RetentionPolicy"
  "/retentionpolicies/find":
    post:
      summary: Find a Retention Policy
      security:
        - AdminApiKeyAuth: []
      operationId: findRetentionPolicies
      tags:
        - Retention Policy
      requestBody:
        description: "Retention Policy query"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindRetentionPoliciesRequest"
      responses:
        "200":
          description: A list of Retention Policy objects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOfRetentionPolicies"
  "/admin/database/init":
    post:
      summary: Init the Hiarc database
      security:
        - AdminApiKeyAuth: []
      operationId: initDB
      tags:
        - Admin
      responses:
        "201":
          description: Empty response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
  "/admin/database/reset":
    put:
      summary: Reset the Hiarc database
      security:
        - AdminApiKeyAuth: []
      operationId: resetDB
      tags:
        - Admin
      responses:
        "200":
          description: Empty response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
components:
  schemas:
    Empty:
      type: "object"
      title: "Empty Schema"
    Entity:
      type: object
      discriminator:
        propertyName: type
        mapping:
          user: "#/components/schemas/User"
          group: "#/components/schemas/Group"
          file: "#/components/schemas/File"
          classification: "#/components/schemas/Classification"
          collection: "#/components/schemas/Collection"
          legalHold: "#/components/schemas/LegalHold"
          retentionPolicy: "#/components/schemas/RetentionPolicy"
      properties:
        key:
          type: string
        type:
          type: string
        name:
          type: string
        description:
          type: string
        metadata:
          type: object
          additionalProperties:
              type: object
        createdBy:
          type: string
        createdAt:
          type: string
          format: date-time
        modifiedAt:
          type: string
          format: date-time
    CreateOrUpdateEntityRequest:
      type: object
      discriminator:
        propertyName: key
        mapping:
          createUser: "#/components/schemas/CreateUserRequest"
          updateUser: "#/components/schemas/UpdateUserRequest"
          createGroup: "#/components/schemas/CreateGroupRequest"
          updateGroup: "#/components/schemas/UpdateGroupRequest"
          createCollection: "#/components/schemas/CreateCollectionRequest"
          updateCollection: "#/components/schemas/UpdateCollectionRequest"
          createFile: "#/components/schemas/CreateFileRequest"
          createClassification: "#/components/schemas/CreateClassificationRequest"
          updateClassification: "#/components/schemas/UpdateClassificationRequest"
          createLegalHold: "#/components/schemas/CreateLegalHoldRequest"
          createRetentionPolicy: "#/components/schemas/CreateRetentionPolicyRequest"
          updateRetentionPolicy: "#/components/schemas/UpdateRetentionPolicyRequest"
      # Adding required seems to break object initializers in C#
      # But it adds in a check to the constructor method for the property
      # required:
      #   - key
      properties:
        key:
          type: string
        name:
          type: string
        description:
          type: string
        metadata:
          type: object
          additionalProperties:
              type: object
    FindEntityRequest:
      type: object
      discriminator:
        propertyName: query
        mapping:
          findUser: "#/components/schemas/FindUsersRequest"
          findGroup: "#/components/schemas/FindGroupsRequest"
          findCollection: "#/components/schemas/FindCollectionsRequest"
          findClassification: "#/components/schemas/FindClassificationsRequest"
          findRetentionPolicies: "#/components/schemas/FindRetentionPoliciesRequest"
      properties:
        query:
          type: array
          items:
            type: object
            additionalProperties:
              type: object
    CreateUserTokenRequest:
      type: object
      # required:
      #   - key
      properties:
        key:
          type: string
        expirationMinues:
          type: number
    CreateUserRequest:
      allOf:
        - $ref: "#/components/schemas/CreateOrUpdateEntityRequest"
        - type: object
    CreateDirectUploadUrlRequest:
      type: object
      properties:
        storageService:
          type: string
    CreateLegalHoldRequest:
      allOf:
        - $ref: "#/components/schemas/CreateOrUpdateEntityRequest"
        - type: object
    CreateRetentionPolicyRequest:
      allOf:
        - $ref: "#/components/schemas/CreateOrUpdateEntityRequest"
        - type: object
          properties:
            # Cannot create unsigned, must change in SDK manually
            seconds:
              type: integer
    CreateGroupRequest:
      allOf:
        - $ref: "#/components/schemas/CreateOrUpdateEntityRequest"
        - type: object
    CreateCollectionRequest:
      allOf:
        - $ref: "#/components/schemas/CreateOrUpdateEntityRequest"
        - type: object
    CreateClassificationRequest:
      allOf:
        - $ref: "#/components/schemas/CreateOrUpdateEntityRequest"
        - type: object
    CreateFileRequest:
      allOf:
        - $ref: "#/components/schemas/CreateOrUpdateEntityRequest"
        - type: object
          properties:
            storageService:
              type: string
    AddUserToFileRequest:
      type: object
      # required:
      #   - userKey
      properties:
        userKey:
          type: string
        accessLevel:
          $ref: '#/components/schemas/AccessLevel'
    AddUserToCollectionRequest:
      type: object
      # required:
      #   - userKey
      properties:
        userKey:
          type: string
        accessLevel:
          $ref: '#/components/schemas/AccessLevel'
    AddGroupToCollectionRequest:
      type: object
      # required:
      #   - groupKey
      properties:
        groupKey:
          type: string
        accessLevel:
          $ref: '#/components/schemas/AccessLevel'
    AddFileToCollectionRequest:
      type: object
      # required:
      #   - fileKey
      properties:
        fileKey:
          type: string
    AddGroupToFileRequest:
      type: object
      # required:
      #   - groupKey
      properties:
        groupKey:
          type: string
        accessLevel:
          $ref: '#/components/schemas/AccessLevel'
    AddRetentionPolicyToFileRequest:
      type: object
      # required:
      #   - retentionPolicyKey
      properties:
        retentionPolicyKey:
          type: string
    AddClassificationToFileRequest:
      type: object
      # required:
      #   - classificationKey
      properties:
        classificationKey:
          type: string
    AddVersionToFileRequest:
      type: object
      properties:
        key:
          type: string
        storageService:
          type: string
        # file:
        #   type: string
        #   format: binary
    UpdateUserRequest:
      allOf:
        - $ref: "#/components/schemas/CreateOrUpdateEntityRequest"
        - type: object
    UpdateRetentionPolicyRequest:
      allOf:
        - $ref: "#/components/schemas/CreateOrUpdateEntityRequest"
        - type: object
          properties:
            # Cannot create unsigned, must change in SDK manually
            seconds:
              type: integer
    UpdateGroupRequest:
      allOf:
        - $ref: "#/components/schemas/CreateOrUpdateEntityRequest"
        - type: object
    UpdateCollectionRequest:
      allOf:
        - $ref: "#/components/schemas/CreateOrUpdateEntityRequest"
        - type: object
    UpdateClassificationRequest:
      allOf:
        - $ref: "#/components/schemas/CreateOrUpdateEntityRequest"
        - type: object
    UpdateFileRequest:
      type: object
      # required:
      #   - key
      properties:
        key:
          type: string
        name:
          type: string
        description:
          type: string
        metadata:
          type: object
    FindUsersRequest:
      allOf:
        - $ref: "#/components/schemas/FindEntityRequest"
        - type: object
    FindRetentionPoliciesRequest:
      allOf:
        - $ref: "#/components/schemas/FindEntityRequest"
        - type: object
    FindGroupsRequest:
      allOf:
        - $ref: "#/components/schemas/FindEntityRequest"
        - type: object
    FindCollectionsRequest:
      allOf:
        - $ref: "#/components/schemas/FindEntityRequest"
        - type: object
    FindClassificationsRequest:
      allOf:
        - $ref: "#/components/schemas/FindEntityRequest"
        - type: object
    AllowedFilesRequest:
      type: object
      properties:
        keys:
          type: array
          items:
            type: string
    AllowedFiles:
      type: array
      items:
        type: string
    AttachToExistingFileRequest:
      type: object
      properties:
        name:
          type: string
        storageService:
          type: string
        storageId:
          type: string
    CopyFileRequest:
      type: object
      properties:
        key:
          type: string
        storageService:
          type: string
    User:
      allOf:
        - $ref: "#/components/schemas/Entity"
        - type: object
    LegalHold:
      allOf:
        - $ref: "#/components/schemas/Entity"
        - type: object
    Classification:
      allOf:
      - $ref: "#/components/schemas/Entity"
      - type: object
    Group:
      allOf:
      - $ref: "#/components/schemas/Entity"
      - type: object
    File:
      allOf:
      - $ref: "#/components/schemas/Entity"
      - type: object
        properties:
          versionCount:
            type: number
    FileVersion:
      type: object
      properties:
        createdBy:
          type: string
        createdAt:
          type: string
          format: date-time
        storageService:
          type: string
        storageId:
          type: string
    FileDirectUpload:
      type: object
      properties:
        directUploadUrl:
          type: string
        storageId:
          type: string
        storageService:
          type: string
        expiresAt:
          type: string
          format: date-time
    FileDirectDownload:
      type: object
      properties:
        key:
          type: string
        directDownloadUrl:
          type: string
        expiresAt:
          type: string
          format: date-time
    RetentionPolicy:
      allOf:
      - $ref: "#/components/schemas/Entity"
      - type: object
        properties:
          # Cannot create unsigned, must change in SDK manually
          seconds:
            type: integer
    RetentionPolicyApplication:
      type: object
      properties:
        retentionPolicy:
          $ref: "#/components/schemas/RetentionPolicy"
        appliedAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
    Collection:
      allOf:
      - $ref: "#/components/schemas/Entity"
      - type: object
    CollectionItems:
      type: object
      properties:
        childCollections:
          type: array
          items:
            $ref: "#/components/schemas/Collection"
        files:
          type: array
          items:
            $ref: "#/components/schemas/File"
    UserCredentials:
      type: object
      properties:
        userKey:
          type: string
        bearerToken:
          type: string
        createdAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
    AccessLevel:
      type: string
      enum:
        - "CO_OWNER"
        - "READ_WRITE"
        - "READ_ONLY"
        - "UPLOAD_ONLY"
      x-enum-varnames:
        - "CO_OWNER"
        - "READ_WRITE"
        - "READ_ONLY"
        - "UPLOAD_ONLY"
    ListOfUsers:
      type: array
      items:
        $ref: "#/components/schemas/User"
    ListOfGroups:
      type: array
      items:
        $ref: "#/components/schemas/Group"
    ListOfClassifications:
      type: array
      items:
        $ref: "#/components/schemas/Classification"
    ListOfFileVersions:
      type: array
      items:
        $ref: "#/components/schemas/FileVersion"
    ListOfFiles:
      type: array
      items:
        $ref: "#/components/schemas/File"
    ListOfRetentionPolicies:
      type: array
      items:
        $ref: "#/components/schemas/RetentionPolicy"
    ListOfRetentionPolicyApplication:
      type: array
      items:
        $ref: "#/components/schemas/RetentionPolicyApplication"
    ListOfCollections:
      type: array
      items:
        $ref: "#/components/schemas/Collection"
  securitySchemes:
    AdminApiKeyAuth:
      type: apiKey
      in: header
      name: X-Hiarc-Api-Key
    JWTBearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
